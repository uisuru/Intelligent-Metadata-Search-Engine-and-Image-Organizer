/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import CLS_Main.Internet;
import CLS_Main.MetaData_Extractor;
import CLS_Main.getGioCode;
import static CLS_Main.getGioCode.address;
import CLS_Main.image_Finder;
import CLS_Main.image_data_from_database;
import CLS_Main.image_data_to_database;
import static GUI.Main.jBu_browse;
import static GUI.Main.jCom_format;
import static GUI.Main.jTe_address;
import static GUI.Main.result;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import org.apache.commons.io.FileUtils;

/**
 *
 * @author Isuru
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public static ArrayList<String> result;
    public static Find_images_from_image_finder find_images_based_on_path_and_pattern;
    public static Find_images_from_MetaData_Extractor metaData_from_basic_functions;
    public static Index_Path index_path;
    img_Viewer img_Viewer = new img_Viewer();
    Process start;

    public Main() {
        initComponents();
        File sourceFile = new File("DB - Original.accdb");
        File destinationFile = new File("DB.accdb");

        try {
            FileUtils.copyFile(sourceFile, destinationFile);
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        for (int i = 0; i < jTabbedPane1.getTabCount(); i++) {
            jTabbedPane1.setEnabledAt(i, false);
        }
        jTabbedPane1.setEnabledAt(0, true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jTe_address = new javax.swing.JTextField();
        jBu_indexing = new javax.swing.JButton();
        jBu_browse = new javax.swing.JButton();
        jCom_format = new javax.swing.JComboBox();
        jToolBar1 = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jProgressBar1 = new javax.swing.JProgressBar();
        jTe_file_name = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jSl_size = new javax.swing.JSlider();
        jTe_size = new javax.swing.JTextField();
        jCo_data_size = new javax.swing.JComboBox();
        jDa_crate = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        jCo_size_plu_min = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLa_preview = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPa_jpg = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jTe_make_jpg = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jSp_reso_w_jpg = new javax.swing.JSpinner();
        jLabel12 = new javax.swing.JLabel();
        jSp_reso_h_jpg = new javax.swing.JSpinner();
        jLabel13 = new javax.swing.JLabel();
        jCo_reso_pu_mi_jpg = new javax.swing.JComboBox();
        jBu_search_jpg = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jCo_Comp_jpg = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jCo_flsah_jpg = new javax.swing.JComboBox();
        jLabel18 = new javax.swing.JLabel();
        jTe_bits_jpg = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jTe_Coun = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jTe_city = new javax.swing.JTextField();
        jLabel50 = new javax.swing.JLabel();
        jPa_png = new javax.swing.JPanel();
        jBu_search_png = new javax.swing.JButton();
        jTe_bits_png = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jCo_Comp_png = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jSp_reso_w_png = new javax.swing.JSpinner();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jSp_reso_h_png = new javax.swing.JSpinner();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jCo_reso_pu_mi_png = new javax.swing.JComboBox();
        jTe_sig_png = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jTe_copy_png = new javax.swing.JTextField();
        jPa_gif = new javax.swing.JPanel();
        jLabel32 = new javax.swing.JLabel();
        jTe_bits_gif = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        jCo_flsah_gif = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jCo_Comp_gif = new javax.swing.JComboBox();
        jSp_reso_w_gif = new javax.swing.JSpinner();
        jLabel36 = new javax.swing.JLabel();
        jSp_reso_h_gif = new javax.swing.JSpinner();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jCo_reso_pu_mi_gif = new javax.swing.JComboBox();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jBu_search_gif = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jSp_reso_h_tif = new javax.swing.JSpinner();
        jLabel45 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jSp_reso_w_tif = new javax.swing.JSpinner();
        jCo_reso_pu_mi_tif = new javax.swing.JComboBox();
        jLabel42 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jTe_bits_tif = new javax.swing.JTextField();
        jLabel47 = new javax.swing.JLabel();
        jCo_Comp_tif = new javax.swing.JComboBox();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jTe_make_tif = new javax.swing.JTextField();
        jBu_search_tif = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jBu_search_bmp = new javax.swing.JButton();
        jLabel51 = new javax.swing.JLabel();
        jSp_reso_w_bmp = new javax.swing.JSpinner();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jSp_reso_h_bmp = new javax.swing.JSpinner();
        jLabel54 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        jCo_reso_pu_mi_bmp = new javax.swing.JComboBox();
        jCo_Comp_bmp = new javax.swing.JComboBox();
        jLabel56 = new javax.swing.JLabel();
        jLabel57 = new javax.swing.JLabel();
        jTe_bits_bmp = new javax.swing.JTextField();
        jLabel58 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();

        jFileChooser1.setDialogTitle("Select Location");
        jFileChooser1.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        jFileChooser1.setToolTipText("");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Search Image");
        setLocationByPlatform(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTe_address.setText("H:\\");
            jTe_address.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jTe_addressActionPerformed(evt);
                }
            });
            jPanel1.add(jTe_address, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 10, 320, 30));

            jBu_indexing.setText("Index Path");
            jBu_indexing.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jBu_indexingActionPerformed(evt);
                }
            });
            jPanel1.add(jBu_indexing, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 10, 100, 30));

            jBu_browse.setText("Browse");
            jBu_browse.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jBu_browseActionPerformed(evt);
                }
            });
            jPanel1.add(jBu_browse, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 10, 100, 30));

            jCom_format.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "*.jpg", "*.jpeg", "*.png", "*.gif", "*.tif", "*.bmp" }));
            jCom_format.addItemListener(new java.awt.event.ItemListener() {
                public void itemStateChanged(java.awt.event.ItemEvent evt) {
                    jCom_formatItemStateChanged(evt);
                }
            });
            jCom_format.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jCom_formatActionPerformed(evt);
                }
            });
            jPanel1.add(jCom_format, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 10, 90, 30));

            jToolBar1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jToolBar1.setFloatable(false);

            jLabel1.setText("                                                 ");
            jLabel1.setPreferredSize(new java.awt.Dimension(600, 14));
            jToolBar1.add(jLabel1);
            jToolBar1.add(jSeparator1);

            jProgressBar1.setMaximumSize(new java.awt.Dimension(32767, 20));
            jProgressBar1.setMinimumSize(new java.awt.Dimension(10, 20));
            jProgressBar1.setPreferredSize(new java.awt.Dimension(146, 20));
            jToolBar1.add(jProgressBar1);

            jPanel1.add(jToolBar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 490, 740, 30));

            jTe_file_name.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jTe_file_nameActionPerformed(evt);
                }
            });
            jPanel1.add(jTe_file_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 70, 300, 30));

            jLabel3.setText("File Name : -");
            jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, -1, -1));

            jLabel5.setText("File Size : -");
            jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, -1, -1));

            jSl_size.setMaximum(1024);
            jSl_size.setToolTipText("");
            jSl_size.setValue(0);
            jSl_size.addChangeListener(new javax.swing.event.ChangeListener() {
                public void stateChanged(javax.swing.event.ChangeEvent evt) {
                    jSl_sizeStateChanged(evt);
                }
            });
            jPanel1.add(jSl_size, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 120, 140, -1));

            jTe_size.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyReleased(java.awt.event.KeyEvent evt) {
                    jTe_sizeKeyReleased(evt);
                }
                public void keyTyped(java.awt.event.KeyEvent evt) {
                    jTe_sizeKeyTyped(evt);
                }
            });
            jPanel1.add(jTe_size, new org.netbeans.lib.awtextra.AbsoluteConstraints(303, 120, 40, -1));

            jCo_data_size.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Byte", "KB", "MB", "GB" }));
            jCo_data_size.setSelectedIndex(2);
            jPanel1.add(jCo_data_size, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 120, -1, -1));

            jDa_crate.setDateFormatString("yyyy:MM:dd");
            jPanel1.add(jDa_crate, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 160, 180, 30));

            jLabel7.setText("Date : -");
            jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, -1, -1));

            jCo_size_plu_min.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "5", "10", "15", "20", "25" }));
            jCo_size_plu_min.setToolTipText("+ or - value");
            jCo_size_plu_min.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jCo_size_plu_minActionPerformed(evt);
                }
            });
            jPanel1.add(jCo_size_plu_min, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 120, -1, -1));

            jLabel4.setText("+/-");
            jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(346, 120, 20, 20));

            jList1.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jList1MouseClicked(evt);
                }
            });
            jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
                public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                    jList1ValueChanged(evt);
                }
            });
            jScrollPane1.setViewportView(jList1);

            jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 70, 300, 240));

            jLabel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Result - Images Path"));
            jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 50, 320, 270));

            jLabel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Basic Search Functions"));
            jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 410, 150));

            jLa_preview.setBorder(javax.swing.BorderFactory.createTitledBorder("Preview"));
            jPanel1.add(jLa_preview, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 320, 320, 170));

            jPa_jpg.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

            jLabel9.setText("Photo Made from(Camera Brand):-");
            jPa_jpg.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, -1, 20));
            jPa_jpg.add(jTe_make_jpg, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 10, 210, -1));

            jLabel11.setText("Resolution : -");
            jPa_jpg.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, -1, 20));
            jPa_jpg.add(jSp_reso_w_jpg, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 40, 70, -1));

            jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            jLabel12.setText("x");
            jPa_jpg.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 40, 20, 20));
            jPa_jpg.add(jSp_reso_h_jpg, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 40, 70, -1));

            jLabel13.setText("+/-");
            jPa_jpg.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 40, -1, 20));

            jCo_reso_pu_mi_jpg.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "5", "10", "15", "20", "25" }));
            jCo_reso_pu_mi_jpg.setToolTipText("+ or - value");
            jCo_reso_pu_mi_jpg.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jCo_reso_pu_mi_jpgActionPerformed(evt);
                }
            });
            jPa_jpg.add(jCo_reso_pu_mi_jpg, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 40, 40, -1));

            jBu_search_jpg.setText("Search");
            jBu_search_jpg.setEnabled(false);
            jBu_search_jpg.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jBu_search_jpgActionPerformed(evt);
                }
            });
            jPa_jpg.add(jBu_search_jpg, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 230, -1, -1));

            jLabel8.setText("Compression Type:- ");
            jPa_jpg.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, -1, 20));

            jCo_Comp_jpg.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "Deflate", "Inflate","None","Uncompressed","T4", "T6","LZW","JPEG"  }));
            jCo_Comp_jpg.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jCo_Comp_jpgActionPerformed(evt);
                }
            });
            jPa_jpg.add(jCo_Comp_jpg, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 70, 110, -1));

            jLabel10.setText("px");
            jPa_jpg.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 40, -1, 20));

            jLabel15.setText("px");
            jPa_jpg.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 40, -1, 20));

            jLabel17.setText("Flash : -");
            jPa_jpg.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, -1, 20));

            jCo_flsah_jpg.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "","Flash fired", "Flash did not fire" }));
            jPa_jpg.add(jCo_flsah_jpg, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 100, 180, -1));

            jLabel18.setText("Location : -");
            jPa_jpg.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, -1, 20));
            jPa_jpg.add(jTe_bits_jpg, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 130, 60, 20));

            jLabel19.setText("bits   ex: 8");
            jPa_jpg.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 130, -1, 20));

            jLabel29.setText("Bits Per Sample : -");
            jPa_jpg.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 130, -1, -1));
            jPa_jpg.add(jTe_Coun, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 190, 140, -1));

            jLabel30.setText("Country:");
            jPa_jpg.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 190, 50, 20));

            jLabel31.setText("City:");
            jPa_jpg.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(83, 160, 30, 20));
            jPa_jpg.add(jTe_city, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 160, 140, -1));

            jLabel50.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
            jLabel50.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Location Result for City and Country", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 8))); // NOI18N
            jPa_jpg.add(jLabel50, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 150, 150, 70));

            jTabbedPane1.addTab("JPG / JPEG", jPa_jpg);

            jPa_png.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

            jBu_search_png.setText("Search");
            jBu_search_png.setEnabled(false);
            jBu_search_png.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jBu_search_pngActionPerformed(evt);
                }
            });
            jPa_png.add(jBu_search_png, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 230, -1, -1));
            jPa_png.add(jTe_bits_png, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 70, 60, 20));

            jLabel20.setText("bits   ex: 8");
            jPa_png.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 70, -1, 20));

            jLabel21.setText("Bits Per Sample : -");
            jPa_png.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, -1, -1));

            jCo_Comp_png.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "","Baseline", "Progressive", "None","Uncompressed","T4", "T6","LZW","JPEG" }));
            jPa_png.add(jCo_Comp_png, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 40, 110, -1));

            jLabel14.setText("Compression Type : - ");
            jPa_png.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, -1, 20));

            jLabel23.setText("Resolution : -");
            jPa_png.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, -1, 20));
            jPa_png.add(jSp_reso_w_png, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 10, 70, -1));

            jLabel24.setText("px");
            jPa_png.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 10, -1, 20));

            jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            jLabel25.setText("x");
            jPa_png.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, 20, 20));
            jPa_png.add(jSp_reso_h_png, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 10, 70, -1));

            jLabel26.setText("px");
            jPa_png.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 10, -1, 20));

            jLabel27.setText("+/-");
            jPa_png.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 10, -1, 20));

            jCo_reso_pu_mi_png.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "5", "10", "15", "20", "25" }));
            jCo_reso_pu_mi_png.setToolTipText("+ or - value");
            jCo_reso_pu_mi_png.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jCo_reso_pu_mi_pngActionPerformed(evt);
                }
            });
            jPa_png.add(jCo_reso_pu_mi_png, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 10, 40, -1));
            jPa_png.add(jTe_sig_png, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 100, 200, 20));

            jLabel22.setText("Signature : -");
            jPa_png.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, -1, 20));

            jLabel28.setText("Copyright : -");
            jPa_png.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 130, -1, 20));
            jPa_png.add(jTe_copy_png, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 130, 200, 20));

            jTabbedPane1.addTab("PNG", jPa_png);

            jPa_gif.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

            jLabel32.setText("Bits per Pixel  : -");
            jPa_gif.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, -1, -1));
            jPa_gif.add(jTe_bits_gif, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 100, 60, 20));

            jLabel33.setText("bits   ex: 8");
            jPa_gif.add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 100, -1, 20));

            jCo_flsah_gif.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "true", "false"  }));
            jPa_gif.add(jCo_flsah_gif, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 70, 120, -1));

            jLabel34.setText("Is Color Table Sorted : -");
            jPa_gif.add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, -1, 20));

            jLabel35.setText("Has Global Color Table : - ");
            jPa_gif.add(jLabel35, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, -1, 20));

            jCo_Comp_gif.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "true", "false" }));
            jPa_gif.add(jCo_Comp_gif, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 40, 120, -1));
            jPa_gif.add(jSp_reso_w_gif, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 10, 70, -1));

            jLabel36.setText("Resolution : -");
            jPa_gif.add(jLabel36, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, -1, 20));
            jPa_gif.add(jSp_reso_h_gif, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 10, 70, -1));

            jLabel37.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            jLabel37.setText("x");
            jPa_gif.add(jLabel37, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, 20, 20));

            jLabel38.setText("px");
            jPa_gif.add(jLabel38, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 10, -1, 20));

            jCo_reso_pu_mi_gif.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "5", "10", "15", "20", "25" }));
            jCo_reso_pu_mi_gif.setToolTipText("+ or - value");
            jCo_reso_pu_mi_gif.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jCo_reso_pu_mi_gifActionPerformed(evt);
                }
            });
            jPa_gif.add(jCo_reso_pu_mi_gif, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 10, 40, -1));

            jLabel39.setText("+/-");
            jPa_gif.add(jLabel39, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 10, -1, 20));

            jLabel40.setText("px");
            jPa_gif.add(jLabel40, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 10, -1, 20));

            jBu_search_gif.setText("Search");
            jBu_search_gif.setEnabled(false);
            jBu_search_gif.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jBu_search_gifActionPerformed(evt);
                }
            });
            jPa_gif.add(jBu_search_gif, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 230, -1, -1));

            jTabbedPane1.addTab("GIF", jPa_gif);

            jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
            jPanel2.add(jSp_reso_h_tif, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 10, 70, -1));

            jLabel45.setText("+/-");
            jPanel2.add(jLabel45, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 10, -1, 20));

            jLabel41.setText("Resolution : -");
            jPanel2.add(jLabel41, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, 20));

            jLabel44.setText("px");
            jPanel2.add(jLabel44, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 10, -1, 20));

            jLabel43.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            jLabel43.setText("x");
            jPanel2.add(jLabel43, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 10, 20, 20));
            jPanel2.add(jSp_reso_w_tif, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 10, 70, -1));

            jCo_reso_pu_mi_tif.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "5", "10", "15", "20", "25" }));
            jCo_reso_pu_mi_tif.setToolTipText("+ or - value");
            jCo_reso_pu_mi_tif.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jCo_reso_pu_mi_tifActionPerformed(evt);
                }
            });
            jPanel2.add(jCo_reso_pu_mi_tif, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 10, 40, -1));

            jLabel42.setText("px");
            jPanel2.add(jLabel42, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, -1, 20));

            jLabel46.setText("Bits Per Sample : -");
            jPanel2.add(jLabel46, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));
            jPanel2.add(jTe_bits_tif, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, 60, 20));

            jLabel47.setText("bits   ex: 8");
            jPanel2.add(jLabel47, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 40, -1, 20));

            jCo_Comp_tif.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "None","Uncompressed","T4", "T6","LZW","JPEG" }));
            jCo_Comp_tif.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jCo_Comp_tifActionPerformed(evt);
                }
            });
            jPanel2.add(jCo_Comp_tif, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 70, 110, -1));

            jLabel48.setText("Compression Type : - ");
            jPanel2.add(jLabel48, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, 20));

            jLabel49.setText("Software : -");
            jPanel2.add(jLabel49, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 120, 20));
            jPanel2.add(jTe_make_tif, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 100, 160, -1));

            jBu_search_tif.setText("Search");
            jBu_search_tif.setEnabled(false);
            jBu_search_tif.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jBu_search_tifActionPerformed(evt);
                }
            });
            jPanel2.add(jBu_search_tif, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 230, -1, -1));

            jTabbedPane1.addTab("TIF", jPanel2);

            jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

            jBu_search_bmp.setText("Search");
            jBu_search_bmp.setEnabled(false);
            jBu_search_bmp.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jBu_search_bmpActionPerformed(evt);
                }
            });
            jPanel3.add(jBu_search_bmp, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 230, -1, -1));

            jLabel51.setText("Resolution : -");
            jPanel3.add(jLabel51, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, -1, 20));
            jPanel3.add(jSp_reso_w_bmp, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 10, 70, -1));

            jLabel52.setText("px");
            jPanel3.add(jLabel52, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 10, -1, 20));

            jLabel53.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            jLabel53.setText("x");
            jPanel3.add(jLabel53, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, 20, 20));
            jPanel3.add(jSp_reso_h_bmp, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 10, 70, -1));

            jLabel54.setText("px");
            jPanel3.add(jLabel54, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 10, -1, 20));

            jLabel55.setText("+/-");
            jPanel3.add(jLabel55, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 10, -1, 20));

            jCo_reso_pu_mi_bmp.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "5", "10", "15", "20", "25" }));
            jCo_reso_pu_mi_bmp.setToolTipText("+ or - value");
            jCo_reso_pu_mi_bmp.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jCo_reso_pu_mi_bmpActionPerformed(evt);
                }
            });
            jPanel3.add(jCo_reso_pu_mi_bmp, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 10, 40, -1));

            jCo_Comp_bmp.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "","None", "Uncompressed","T4", "T6","LZW","JPEG" }));
            jCo_Comp_bmp.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jCo_Comp_bmpActionPerformed(evt);
                }
            });
            jPanel3.add(jCo_Comp_bmp, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 40, 110, -1));

            jLabel56.setText("Compression Type : - ");
            jPanel3.add(jLabel56, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, -1, 20));

            jLabel57.setText("Bits per Pixel  : -");
            jPanel3.add(jLabel57, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, -1, -1));
            jPanel3.add(jTe_bits_bmp, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 70, 60, 20));

            jLabel58.setText("bits   ex: 8");
            jPanel3.add(jLabel58, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 70, -1, 20));

            jTabbedPane1.addTab("BMP", jPanel3);

            jPanel1.add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 410, 290));
            jTabbedPane1.getAccessibleContext().setAccessibleDescription("");

            jLabel16.setText("Format = yyyy:MM:dd");
            jPanel1.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 164, 110, 20));

            jCheckBox1.setText("All Path");
            jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jCheckBox1ActionPerformed(evt);
                }
            });
            jPanel1.add(jCheckBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, 30));

            getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 750, 517));

            pack();
            setLocationRelativeTo(null);
        }// </editor-fold>//GEN-END:initComponents

    private void jBu_indexingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBu_indexingActionPerformed
        //Worker find_images_based_on_path_and_pattern = new Find_images_from_image_finder();
        jLabel1.setText("Indexing...");
        jProgressBar1.setValue(0);
//        metaData_from_basic_functions = new Find_images_from_MetaData_Extractor();
//        metaData_from_basic_functions.execute();
        find_images_based_on_path_and_pattern = new Find_images_from_image_finder();
        find_images_based_on_path_and_pattern.execute();
        while (!find_images_based_on_path_and_pattern.isDone()) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        index_path = new Index_Path();
        index_path.execute();
        while (!index_path.isDone()) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        jLabel1.setText("Indexing process completed...");
        jBu_search_jpg.setEnabled(true);
        jBu_search_png.setEnabled(true);
        jBu_search_gif.setEnabled(true);
        jBu_search_tif.setEnabled(true);
        jLa_preview.setIcon(null);
    }//GEN-LAST:event_jBu_indexingActionPerformed

    private void jBu_browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBu_browseActionPerformed
        int returnValue = jFileChooser1.showOpenDialog(null);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = jFileChooser1.getSelectedFile();
//            System.out.println(selectedFile.getName());//Folder Name
//            System.out.println(selectedFile.getAbsolutePath());//C:\Users\Isuru\Documents\CodeBlocks
            jTe_address.setText(selectedFile.getAbsolutePath());
        }
    }//GEN-LAST:event_jBu_browseActionPerformed

    private void jCo_size_plu_minActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCo_size_plu_minActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCo_size_plu_minActionPerformed

    private void jSl_sizeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSl_sizeStateChanged
        jTe_size.setText("" + jSl_size.getValue());
    }//GEN-LAST:event_jSl_sizeStateChanged

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        if (!jList1.isSelectionEmpty()) {
            if (evt.getClickCount() == 1) {
                try {
                    //                BufferedImage img = null;
//                ImageIcon imageIcon = new ImageIcon(new ImageIcon(jList1.getSelectedValue().toString()).getImage().getScaledInstance(jLa_preview.getWidth() - 10, jLa_preview.getHeight() - 20, Image.SCALE_SMOOTH));
//                jLa_preview.setIcon(imageIcon);
                    BufferedImage image = ImageIO.read(new File(jList1.getSelectedValue().toString()));
                    BufferedImage ret = new BufferedImage(300, 140, BufferedImage.TYPE_INT_RGB);
                    ret.getGraphics().drawImage(image, 0, 0, 300, 140, null);
                    jLa_preview.setIcon(new ImageIcon(ret));
                } catch (IOException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (evt.getClickCount() == 2) {

                //            ImageIcon icon = new ImageIcon(jList1.getSelectedValue().toString());
//            jLabel10.setIcon(icon);
//            jFrame1.setVisible(true);
                    /*BufferedImage img = null;
                 img_Viewer.path = jList1.getSelectedValue().toString();
                 img_Viewer.setVisible(true);*/
                /*File file = new File(jList1.getSelectedValue().toString());
                 Desktop desktop = Desktop.getDesktop();
                 try {
                 desktop.open(file);
                 } catch (IOException ex) {
                 Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                 }*///openfile with default windwos opening app(photo viwer)
                try {
                    //start = new ProcessBuilder("explorer.exe", "/select," + jList1.getSelectedValue().toString()).start();
                    Runtime.getRuntime().exec("explorer.exe /select," + jList1.getSelectedValue().toString());
                } catch (IOException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_jList1MouseClicked

    private void jTe_sizeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTe_sizeKeyTyped
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        } else if (!(Integer.parseInt(jTe_size.getText() + evt.getKeyChar()) >= 0 && Integer.parseInt(jTe_size.getText() + evt.getKeyChar()) <= 1024)) {
            evt.consume();
        }
    }//GEN-LAST:event_jTe_sizeKeyTyped

    private void jTe_sizeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTe_sizeKeyReleased
        try {
            jSl_size.setValue(Integer.parseInt(jTe_size.getText()));
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jTe_sizeKeyReleased

    private void jCo_reso_pu_mi_jpgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCo_reso_pu_mi_jpgActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCo_reso_pu_mi_jpgActionPerformed

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        if (!jList1.isSelectionEmpty()) {
            BufferedImage img = null;
            ImageIcon imageIcon = new ImageIcon(new ImageIcon(jList1.getSelectedValue().toString()).getImage().getScaledInstance(jLa_preview.getWidth() - 10, jLa_preview.getHeight() - 20, Image.SCALE_SMOOTH));
            jLa_preview.setIcon(imageIcon);
        }
    }//GEN-LAST:event_jList1ValueChanged

    private void jBu_search_jpgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBu_search_jpgActionPerformed
        try {
            String quary, max, min, max_h, max_w, min_h, min_w, date, Height, Width, Range;
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy:MM:dd");
            try {
                date = simpleDateFormat.format(Main.jDa_crate.getDate());
            } catch (Exception e) {
                date = "";
            }
            quary = "select path from data where ";
            if (!jTe_file_name.getText().equals("")) {
                quary = quary + "file_name like '%" + jTe_file_name.getText() + "%' ";
            }
            if (!jTe_size.getText().equals("") && !jTe_size.getText().equals("0")) {
                int minf;
                try {
                    minf = Integer.parseInt(jTe_size.getText());
                } catch (Exception e) {
                    minf = 0;
                }
                switch (jCo_data_size.getSelectedItem().toString()) {
                    case "GB":
                        minf = minf * 1024 * 1024 * 1024;
                        break;
                    case "MB":
                        minf = minf * 1024 * 1024;
                        break;
                    case "KB":
                        minf = minf * 1024;
                        break;
                }
                min = "" + (minf - (minf / 100) * Integer.parseInt(jCo_size_plu_min.getSelectedItem().toString()));
                max = "" + (minf + (minf / 100) * Integer.parseInt(jCo_size_plu_min.getSelectedItem().toString()));
                if (quary.equals("select path from data where ")) {
                    quary = quary.concat("file_size BETWEEN " + min + " AND " + max + " ");
                } else {
                    quary = quary.concat("and file_size BETWEEN " + min + " AND " + max + " ");
                }
            }
            if (!date.equals("")) {
                if (quary.equals("select path from data where ")) {
                    quary = quary + "Date_Time like '%" + date.replaceAll(":", " ") + "%' ";
                } else {
                    quary = quary + "and Date_Time like '%" + date.replaceAll(":", " ") + "%' ";
                }
            }
            if (!jTe_make_jpg.getText().equals("")) {
                if (quary.equals("select path from data where ")) {
                    quary = quary + "make like '%" + jTe_make_jpg.getText() + "%' ";
                } else {
                    quary = quary + "and make like '%" + jTe_make_jpg.getText() + "%' ";
                }
            }

            try {
                Height = jSp_reso_h_jpg.getValue().toString();
                Width = jSp_reso_w_jpg.getValue().toString();
                System.out.println(Height);
            } catch (Exception e) {
                Height = Width = "0";
            }
            if (!Height.equals("") && !Height.equals("0") && !Width.equals("") && !Width.equals("0")) {
                Range = jCo_reso_pu_mi_jpg.getSelectedItem().toString();
                min_h = "" + (Integer.parseInt(Height) - ((Integer.parseInt(Height) / 100) * Integer.parseInt(Range)));
                max_h = "" + (Integer.parseInt(Height) + ((Integer.parseInt(Height) / 100) * Integer.parseInt(Range)));
                min_w = "" + (Integer.parseInt(Width) - ((Integer.parseInt(Width) / 100) * Integer.parseInt(Range)));
                max_w = "" + (Integer.parseInt(Width) + ((Integer.parseInt(Width) / 100) * Integer.parseInt(Range)));
                if (quary.equals("select path from data where ")) {
                    quary = quary + "Image_Height between " + min_h + " and " + max_h + " and Image_Width between " + min_w + " and " + max_w + " ";
                } else {
                    quary = quary + "and Image_Height between " + min_h + " and " + max_h + " and Image_Width between " + min_w + " and " + max_w + " ";
                }
            }
            if (!jCo_Comp_jpg.getSelectedItem().equals("")) {
                if (quary.equals("select path from data where ")) {
                    quary = quary + "Compression_Type like '%" + jCo_Comp_jpg.getSelectedItem() + "%' ";
                } else {
                    quary = quary + "and Compression_Type like '%" + jCo_Comp_jpg.getSelectedItem() + "%' ";
                }
            }
            if (!jCo_flsah_jpg.getSelectedItem().equals("")) {
                if (quary.equals("select path from data where ")) {
                    quary = quary + "Flash like '%" + jCo_flsah_jpg.getSelectedItem() + "%' ";
                } else {
                    quary = quary + "and Flash like '%" + jCo_flsah_jpg.getSelectedItem() + "%' ";
                }
            }
            if (!jTe_bits_jpg.getText().equals("")) {
                if (quary.equals("select path from data where ")) {
                    quary = quary + "Bits_Per_Sample like '%" + jTe_bits_jpg.getText() + "%' ";
                } else {
                    quary = quary + "and Bits_Per_Sample like '%" + jTe_bits_jpg.getText() + "%' ";
                }
            }
            if (!jTe_city.getText().equals("") || !jTe_Coun.getText().equals("")) {
                if (Internet.isAvailable()) {
                    double[] gioCode = getGioCode.getGioCode(jTe_city.getText() + " " + jTe_Coun.getText());
                    double maxlat, minlat, maxlng, minlng;
                    if (gioCode[0] > gioCode[2]) {
                        maxlat = gioCode[0];
                        minlat = gioCode[2];
                    } else {
                        maxlat = gioCode[2];
                        minlat = gioCode[0];
                    }
                    if (gioCode[1] > gioCode[3]) {
                        maxlng = gioCode[1];
                        minlng = gioCode[3];
                    } else {
                        maxlng = gioCode[3];
                        minlng = gioCode[1];
                    }
                    if (quary.equals("select path from data where ")) {
                        quary = quary + "GPS_Longitude between " + minlng + " and " + maxlng + " and GPS_Latitude between "
                                + minlat + " and " + maxlat + " ";
                    } else {
                        quary = quary + "and GPS_Longitude between " + minlng + " and " + maxlng + " and GPS_Latitude between "
                                + minlat + " and " + maxlat + " ";
                    }
                    String s = "";
                    for (int i = 0; i < address.length && i < 4; i++) {
                        s = s + address[i].longName + "<br>";
                    }
                    jLabel50.setText("<html>" + s + "</html>");
                } else {
                    jLabel50.setText("No internet Connection..");
                }
            }

            //###########
            if (quary.equals("select path from data where ")) {
                quary = "select path from data";
            }
            System.out.println(quary);
            if (jCheckBox1.isSelected()) {
                ArrayList<String> get = image_data_from_database.get(quary, true);
            } else {
                ArrayList<String> get = image_data_from_database.get(quary, false);
            }
        } catch (/*ParseException | SQLException*/Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        jLa_preview.setIcon(null);
    }//GEN-LAST:event_jBu_search_jpgActionPerformed

    private void jTe_addressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTe_addressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTe_addressActionPerformed

    private void jTe_file_nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTe_file_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTe_file_nameActionPerformed

    private void jBu_search_pngActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBu_search_pngActionPerformed
        try {
            String quary, max, min, max_h, max_w, min_h, min_w, date, Height, Width, Range;
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy:MM:dd");
            try {
                date = simpleDateFormat.format(Main.jDa_crate.getDate());
            } catch (Exception e) {
                date = "";
            }
            quary = "select path from data where ";
            if (!jTe_file_name.getText().equals("")) {
                quary = quary + "file_name like '%" + jTe_file_name.getText() + "%' ";
            }
            if (!jTe_size.getText().equals("") && !jTe_size.getText().equals("0")) {
                int minf;
                try {
                    minf = Integer.parseInt(jTe_size.getText());
                } catch (Exception e) {
                    minf = 0;
                }
                switch (jCo_data_size.getSelectedItem().toString()) {
                    case "GB":
                        minf = minf * 1024 * 1024 * 1024;
                        break;
                    case "MB":
                        minf = minf * 1024 * 1024;
                        break;
                    case "KB":
                        minf = minf * 1024;
                        break;
                }
                min = "" + (minf - (minf / 100) * Integer.parseInt(jCo_size_plu_min.getSelectedItem().toString()));
                max = "" + (minf + (minf / 100) * Integer.parseInt(jCo_size_plu_min.getSelectedItem().toString()));
                if (quary.equals("select path from data where ")) {
                    quary = quary.concat("file_size BETWEEN " + min + " AND " + max + " ");
                } else {
                    quary = quary.concat("and file_size BETWEEN " + min + " AND " + max + " ");
                }
            }
            if (!date.equals("")) {
                if (quary.equals("select path from data where ")) {
                    quary = quary + "Date_Time like '%" + date.replaceAll(":", " ") + "%' ";
                } else {
                    quary = quary + "and Date_Time like '%" + date.replaceAll(":", " ") + "%' ";
                }
            }

            try {
                Height = jSp_reso_h_png.getValue().toString();
                Width = jSp_reso_w_png.getValue().toString();
                System.out.println(Height);
            } catch (Exception e) {
                Height = Width = "0";
            }
            if (!Height.equals("") && !Height.equals("0") && !Width.equals("") && !Width.equals("0")) {
                Range = jCo_reso_pu_mi_png.getSelectedItem().toString();
                min_h = "" + (Integer.parseInt(Height) - ((Integer.parseInt(Height) / 100) * Integer.parseInt(Range)));
                max_h = "" + (Integer.parseInt(Height) + ((Integer.parseInt(Height) / 100) * Integer.parseInt(Range)));
                min_w = "" + (Integer.parseInt(Width) - ((Integer.parseInt(Width) / 100) * Integer.parseInt(Range)));
                max_w = "" + (Integer.parseInt(Width) + ((Integer.parseInt(Width) / 100) * Integer.parseInt(Range)));
                if (quary.equals("select path from data where ")) {
                    quary = quary + "Image_Height between " + min_h + " and " + max_h + " and Image_Width between " + min_w + " and " + max_w + " ";
                } else {
                    quary = quary + "and Image_Height between " + min_h + " and " + max_h + " and Image_Width between " + min_w + " and " + max_w + " ";
                }
            }
            if (quary.equals("select path from data where ")) {
                quary = quary + "Compression_Type like '%" + jCo_Comp_png.getSelectedItem() + "%' ";
            } else {
                quary = quary + "and Compression_Type like '%" + jCo_Comp_png.getSelectedItem() + "%' ";
            }
            if (!jTe_bits_png.getText().equals("")) {
                if (quary.equals("select path from data where ")) {
                    quary = quary + "Bits_Per_Sample like '%" + jTe_bits_png.getText() + "%' ";
                } else {
                    quary = quary + "and Bits_Per_Sample like '%" + jTe_bits_png.getText() + "%' ";
                }
            }
            if (!jTe_sig_png.getText().equals("")) {
                if (quary.equals("select path from data where ")) {
                    quary = quary + "Signature like '%" + jTe_sig_png.getText() + "%' ";
                } else {
                    quary = quary + "and Signature like '%" + jTe_sig_png.getText() + "%' ";
                }
            }
            if (!jTe_copy_png.getText().equals("")) {
                if (quary.equals("select path from data where ")) {
                    quary = quary + "Copyright like '%" + jTe_sig_png.getText() + "%' ";
                } else {
                    quary = quary + "and Copyright like '%" + jTe_sig_png.getText() + "%' ";
                }
            }
            //###########
            if (quary.equals("select path from data where ")) {
                quary = "select path from data";
            }
            System.out.println(quary);
            if (jCheckBox1.isSelected()) {
                ArrayList<String> get = image_data_from_database.get(quary, true);
            } else {
                ArrayList<String> get = image_data_from_database.get(quary, false);
            }
        } catch (/*ParseException | SQLException*/Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        jLa_preview.setIcon(null);
    }//GEN-LAST:event_jBu_search_pngActionPerformed

    private void jCo_reso_pu_mi_pngActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCo_reso_pu_mi_pngActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCo_reso_pu_mi_pngActionPerformed

    private void jCom_formatItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCom_formatItemStateChanged
        int enable = jCom_format.getSelectedIndex();
        for (int i = 1; i < jCom_format.getItemCount(); i++) {
            if (enable == 0 || enable == 1) {
                jTabbedPane1.setEnabledAt(0, true);
                jTabbedPane1.setSelectedIndex(0);
                for (int j = 2; j < jCom_format.getItemCount(); j++) {
                    jTabbedPane1.setEnabledAt(j - 1, false);
                }
            } else if (enable == i) {
                jTabbedPane1.setEnabledAt(i - 1, true);
                jTabbedPane1.setSelectedIndex(i - 1);
            } else {
                jTabbedPane1.setEnabledAt(i - 1, false);
            }
        }
    }//GEN-LAST:event_jCom_formatItemStateChanged

    private void jCo_reso_pu_mi_gifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCo_reso_pu_mi_gifActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCo_reso_pu_mi_gifActionPerformed

    private void jBu_search_gifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBu_search_gifActionPerformed
        try {
            String quary, max, min, max_h, max_w, min_h, min_w, date, Height, Width, Range;
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy:MM:dd");
            try {
                date = simpleDateFormat.format(Main.jDa_crate.getDate());
            } catch (Exception e) {
                date = "";
            }
            quary = "select path from data where ";
            if (!jTe_file_name.getText().equals("")) {
                quary = quary + "file_name like '%" + jTe_file_name.getText() + "%' ";
            }
            if (!jTe_size.getText().equals("") && !jTe_size.getText().equals("0")) {
                int minf;
                try {
                    minf = Integer.parseInt(jTe_size.getText());
                } catch (Exception e) {
                    minf = 0;
                }
                switch (jCo_data_size.getSelectedItem().toString()) {
                    case "GB":
                        minf = minf * 1024 * 1024 * 1024;
                        break;
                    case "MB":
                        minf = minf * 1024 * 1024;
                        break;
                    case "KB":
                        minf = minf * 1024;
                        break;
                }
                min = "" + (minf - (minf / 100) * Integer.parseInt(jCo_size_plu_min.getSelectedItem().toString()));
                max = "" + (minf + (minf / 100) * Integer.parseInt(jCo_size_plu_min.getSelectedItem().toString()));
                if (quary.equals("select path from data where ")) {
                    quary = quary.concat("file_size BETWEEN " + min + " AND " + max + " ");
                } else {
                    quary = quary.concat("and file_size BETWEEN " + min + " AND " + max + " ");
                }
            }
            if (!date.equals("")) {
                if (quary.equals("select path from data where ")) {
                    quary = quary + "File_Modified_Date like '%" + date.replaceAll(":", " ") + "%' ";
                } else {
                    quary = quary + "and File_Modified_Date like '%" + date.replaceAll(":", " ") + "%' ";
                }
            }
            try {
                Height = jSp_reso_h_gif.getValue().toString();
                Width = jSp_reso_w_gif.getValue().toString();
                System.out.println(Height);
            } catch (Exception e) {
                Height = Width = "0";
            }
            if (!Height.equals("") && !Height.equals("0") && !Width.equals("") && !Width.equals("0")) {
                Range = jCo_reso_pu_mi_gif.getSelectedItem().toString();
                min_h = "" + (Integer.parseInt(Height) - ((Integer.parseInt(Height) / 100) * Integer.parseInt(Range)));
                max_h = "" + (Integer.parseInt(Height) + ((Integer.parseInt(Height) / 100) * Integer.parseInt(Range)));
                min_w = "" + (Integer.parseInt(Width) - ((Integer.parseInt(Width) / 100) * Integer.parseInt(Range)));
                max_w = "" + (Integer.parseInt(Width) + ((Integer.parseInt(Width) / 100) * Integer.parseInt(Range)));
                if (quary.equals("select path from data where ")) {
                    quary = quary + "Image_Height between " + min_h + " and " + max_h + " and Image_Width between " + min_w + " and " + max_w + " ";
                } else {
                    quary = quary + "and Image_Height between " + min_h + " and " + max_h + " and Image_Width between " + min_w + " and " + max_w + " ";
                }
            }
            if (!jCo_Comp_gif.getSelectedItem().equals("")) {
                if (quary.equals("select path from data where ")) {
                    quary = quary + "Has_Global_Color_Table  like '%" + jCo_Comp_gif.getSelectedItem() + "%' ";
                } else {
                    quary = quary + "and Has_Global_Color_Table  like '%" + jCo_Comp_gif.getSelectedItem() + "%' ";
                }
            }
            if (!jCo_flsah_gif.getSelectedItem().equals("")) {
                if (quary.equals("select path from data where ")) {
                    quary = quary + "Is_Color_Table_Sorted like '%" + jCo_flsah_gif.getSelectedItem() + "%' ";
                } else {
                    quary = quary + "and Is_Color_Table_Sorted  like '%" + jCo_flsah_gif.getSelectedItem() + "%' ";
                }
            }
            if (!jTe_bits_gif.getText().equals("")) {
                if (quary.equals("select path from data where ")) {
                    quary = quary + "Bits_Per_Sample like '%" + jTe_bits_gif.getText() + "%' ";
                } else {
                    quary = quary + "and Bits_Per_Sample like '%" + jTe_bits_gif.getText() + "%' ";
                }
            }
            //###########
            if (quary.equals("select path from data where ")) {
                quary = "select path from data";
            }
            System.out.println(quary);
            if (jCheckBox1.isSelected()) {
                ArrayList<String> get = image_data_from_database.get(quary, true);
            } else {
                ArrayList<String> get = image_data_from_database.get(quary, false);
            }
        } catch (/*ParseException | SQLException*/Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        jLa_preview.setIcon(null);
    }//GEN-LAST:event_jBu_search_gifActionPerformed

    private void jCo_reso_pu_mi_tifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCo_reso_pu_mi_tifActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCo_reso_pu_mi_tifActionPerformed

    private void jCo_Comp_tifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCo_Comp_tifActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCo_Comp_tifActionPerformed

    private void jBu_search_tifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBu_search_tifActionPerformed
        try {
            String quary, max, min, max_h, max_w, min_h, min_w, date, Height, Width, Range;
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy:MM:dd");
            try {
                date = simpleDateFormat.format(Main.jDa_crate.getDate());
            } catch (Exception e) {
                date = "";
            }
            quary = "select path from data where ";
            if (!jTe_file_name.getText().equals("")) {
                quary = quary + "file_name like '%" + jTe_file_name.getText() + "%' ";
            }
            if (!jTe_size.getText().equals("") && !jTe_size.getText().equals("0")) {
                int minf;
                try {
                    minf = Integer.parseInt(jTe_size.getText());
                } catch (Exception e) {
                    minf = 0;
                }
                switch (jCo_data_size.getSelectedItem().toString()) {
                    case "GB":
                        minf = minf * 1024 * 1024 * 1024;
                        break;
                    case "MB":
                        minf = minf * 1024 * 1024;
                        break;
                    case "KB":
                        minf = minf * 1024;
                        break;
                }
                min = "" + (minf - (minf / 100) * Integer.parseInt(jCo_size_plu_min.getSelectedItem().toString()));
                max = "" + (minf + (minf / 100) * Integer.parseInt(jCo_size_plu_min.getSelectedItem().toString()));
                if (quary.equals("select path from data where ")) {
                    quary = quary.concat("file_size BETWEEN " + min + " AND " + max + " ");
                } else {
                    quary = quary.concat("and file_size BETWEEN " + min + " AND " + max + " ");
                }
            }
            if (!date.equals("")) {
                if (quary.equals("select path from data where ")) {
                    quary = quary + "Date_Time like '%" + date.replaceAll(":", " ") + "%' ";
                } else {
                    quary = quary + "and Date_Time like '%" + date.replaceAll(":", " ") + "%' ";
                }
            }

            try {
                Height = jSp_reso_h_tif.getValue().toString();
                Width = jSp_reso_w_tif.getValue().toString();
                System.out.println(Height);
            } catch (Exception e) {
                Height = Width = "0";
            }
            if (!Height.equals("") && !Height.equals("0") && !Width.equals("") && !Width.equals("0")) {
                Range = jCo_reso_pu_mi_tif.getSelectedItem().toString();
                min_h = "" + (Integer.parseInt(Height) - ((Integer.parseInt(Height) / 100) * Integer.parseInt(Range)));
                max_h = "" + (Integer.parseInt(Height) + ((Integer.parseInt(Height) / 100) * Integer.parseInt(Range)));
                min_w = "" + (Integer.parseInt(Width) - ((Integer.parseInt(Width) / 100) * Integer.parseInt(Range)));
                max_w = "" + (Integer.parseInt(Width) + ((Integer.parseInt(Width) / 100) * Integer.parseInt(Range)));
                if (quary.equals("select path from data where ")) {
                    quary = quary + "Image_Height between " + min_h + " and " + max_h + " and Image_Width between " + min_w + " and " + max_w + " ";
                } else {
                    quary = quary + "and Image_Height between " + min_h + " and " + max_h + " and Image_Width between " + min_w + " and " + max_w + " ";
                }
            }
            if (quary.equals("select path from data where ")) {
                quary = quary + "Compression like '%" + jCo_Comp_tif.getSelectedItem() + "%' ";
            } else {
                quary = quary + "and Compression like '%" + jCo_Comp_tif.getSelectedItem() + "%' ";
            }
            if (!jTe_bits_tif.getText().equals("")) {
                if (quary.equals("select path from data where ")) {
                    quary = quary + "Bits_Per_Sample like '%" + jTe_bits_tif.getText() + "%' ";
                } else {
                    quary = quary + "and Bits_Per_Sample like '%" + jTe_bits_tif.getText() + "%' ";
                }
            }
            if (!jTe_make_tif.getText().equals("")) {
                if (quary.equals("select path from data where ")) {
                    quary = quary + "Software like '%" + jTe_make_tif.getText() + "%' ";
                } else {
                    quary = quary + "and Software like '%" + jTe_make_tif.getText() + "%' ";
                }
            }
            //###########
            if (quary.equals("select path from data where ")) {
                quary = "select path from data";
            }
            System.out.println(quary);
            if (jCheckBox1.isSelected()) {
                ArrayList<String> get = image_data_from_database.get(quary, true);
            } else {
                ArrayList<String> get = image_data_from_database.get(quary, false);
            }
        } catch (/*ParseException | SQLException*/Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        jLa_preview.setIcon(null);
    }//GEN-LAST:event_jBu_search_tifActionPerformed

    private void jCo_Comp_jpgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCo_Comp_jpgActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCo_Comp_jpgActionPerformed

    private void jCom_formatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCom_formatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCom_formatActionPerformed

    private void jBu_search_bmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBu_search_bmpActionPerformed
        try {
            String quary, max, min, max_h, max_w, min_h, min_w, date, Height, Width, Range;
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy:MM:dd");
            try {
                date = simpleDateFormat.format(Main.jDa_crate.getDate());
            } catch (Exception e) {
                date = "";
            }
            quary = "select path from data where ";
            if (!jTe_file_name.getText().equals("")) {
                quary = quary + "file_name like '%" + jTe_file_name.getText() + "%' ";
            }
            if (!jTe_size.getText().equals("") && !jTe_size.getText().equals("0")) {
                int minf;
                try {
                    minf = Integer.parseInt(jTe_size.getText());
                } catch (Exception e) {
                    minf = 0;
                }
                switch (jCo_data_size.getSelectedItem().toString()) {
                    case "GB":
                        minf = minf * 1024 * 1024 * 1024;
                        break;
                    case "MB":
                        minf = minf * 1024 * 1024;
                        break;
                    case "KB":
                        minf = minf * 1024;
                        break;
                }
                min = "" + (minf - (minf / 100) * Integer.parseInt(jCo_size_plu_min.getSelectedItem().toString()));
                max = "" + (minf + (minf / 100) * Integer.parseInt(jCo_size_plu_min.getSelectedItem().toString()));
                if (quary.equals("select path from data where ")) {
                    quary = quary.concat("file_size BETWEEN " + min + " AND " + max + " ");
                } else {
                    quary = quary.concat("and file_size BETWEEN " + min + " AND " + max + " ");
                }
            }
            if (!date.equals("")) {
                if (quary.equals("select path from data where ")) {
                    quary = quary + "Date_Time like '%" + date.replaceAll(":", " ") + "%' ";
                } else {
                    quary = quary + "and Date_Time like '%" + date.replaceAll(":", " ") + "%' ";
                }
            }
            try {
                Height = jSp_reso_h_bmp.getValue().toString();
                Width = jSp_reso_w_bmp.getValue().toString();
                System.out.println(Height);
            } catch (Exception e) {
                Height = Width = "0";
            }
            if (!Height.equals("") && !Height.equals("0") && !Width.equals("") && !Width.equals("0")) {
                Range = jCo_reso_pu_mi_bmp.getSelectedItem().toString();
                min_h = "" + (Integer.parseInt(Height) - ((Integer.parseInt(Height) / 100) * Integer.parseInt(Range)));
                max_h = "" + (Integer.parseInt(Height) + ((Integer.parseInt(Height) / 100) * Integer.parseInt(Range)));
                min_w = "" + (Integer.parseInt(Width) - ((Integer.parseInt(Width) / 100) * Integer.parseInt(Range)));
                max_w = "" + (Integer.parseInt(Width) + ((Integer.parseInt(Width) / 100) * Integer.parseInt(Range)));
                if (quary.equals("select path from data where ")) {
                    quary = quary + "Image_Height between " + min_h + " and " + max_h + " and Image_Width between " + min_w + " and " + max_w + " ";
                } else {
                    quary = quary + "and Image_Height between " + min_h + " and " + max_h + " and Image_Width between " + min_w + " and " + max_w + " ";
                }
            }
            if (!jCo_Comp_bmp.getSelectedItem().equals("")) {
                if (quary.equals("select path from data where ")) {
                    quary = quary + "Compression like '%" + jCo_Comp_bmp.getSelectedItem() + "%' ";
                } else {
                    quary = quary + "and Compression like '%" + jCo_Comp_bmp.getSelectedItem() + "%' ";
                }
            }
            if (!jTe_bits_bmp.getText().equals("")) {
                if (quary.equals("select path from data where ")) {
                    quary = quary + "Bits_Per_Pixel like '%" + jTe_bits_bmp.getText() + "%' ";
                } else {
                    quary = quary + "and Bits_Per_Pixel like '%" + jTe_bits_bmp.getText() + "%' ";
                }
            }
            //###########
            if (quary.equals("select path from data where ")) {
                quary = "select path from data";
            }
            System.out.println(quary);
            if (jCheckBox1.isSelected()) {
                ArrayList<String> get = image_data_from_database.get(quary, true);
            } else {
                ArrayList<String> get = image_data_from_database.get(quary, false);
            }
        } catch (/*ParseException | SQLException*/Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        jLa_preview.setIcon(null);
    }//GEN-LAST:event_jBu_search_bmpActionPerformed

    private void jCo_reso_pu_mi_bmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCo_reso_pu_mi_bmpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCo_reso_pu_mi_bmpActionPerformed

    private void jCo_Comp_bmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCo_Comp_bmpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCo_Comp_bmpActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if (jCheckBox1.isSelected()) {
            jTe_address.setEnabled(false);
            jTe_address.setText("ALL");
            jBu_browse.setEnabled(false);
            jBu_indexing.setEnabled(false);
            jBu_search_bmp.setEnabled(true);
            jBu_search_gif.setEnabled(true);
            jBu_search_jpg.setEnabled(true);
            jBu_search_png.setEnabled(true);
            jBu_search_tif.setEnabled(true);
        } else {
            jTe_address.setEnabled(true);
            jTe_address.setText("C:/");
            jBu_browse.setEnabled(true);
            jBu_indexing.setEnabled(true);
            jBu_search_bmp.setEnabled(false);
            jBu_search_gif.setEnabled(false);
            jBu_search_jpg.setEnabled(false);
            jBu_search_png.setEnabled(false);
            jBu_search_tif.setEnabled(false);
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton jBu_browse;
    public static javax.swing.JButton jBu_indexing;
    private javax.swing.JButton jBu_search_bmp;
    private javax.swing.JButton jBu_search_gif;
    private javax.swing.JButton jBu_search_jpg;
    private javax.swing.JButton jBu_search_png;
    private javax.swing.JButton jBu_search_tif;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox jCo_Comp_bmp;
    private javax.swing.JComboBox jCo_Comp_gif;
    private javax.swing.JComboBox jCo_Comp_jpg;
    private javax.swing.JComboBox jCo_Comp_png;
    private javax.swing.JComboBox jCo_Comp_tif;
    public static javax.swing.JComboBox jCo_data_size;
    private javax.swing.JComboBox jCo_flsah_gif;
    private javax.swing.JComboBox jCo_flsah_jpg;
    public static javax.swing.JComboBox jCo_reso_pu_mi_bmp;
    public static javax.swing.JComboBox jCo_reso_pu_mi_gif;
    public static javax.swing.JComboBox jCo_reso_pu_mi_jpg;
    public static javax.swing.JComboBox jCo_reso_pu_mi_png;
    public static javax.swing.JComboBox jCo_reso_pu_mi_tif;
    public static javax.swing.JComboBox jCo_size_plu_min;
    public static javax.swing.JComboBox jCom_format;
    public static com.toedter.calendar.JDateChooser jDa_crate;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLa_preview;
    public static javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    public static javax.swing.JList jList1;
    private javax.swing.JPanel jPa_gif;
    private javax.swing.JPanel jPa_jpg;
    private javax.swing.JPanel jPa_png;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    public static javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JSlider jSl_size;
    private javax.swing.JSpinner jSp_reso_h_bmp;
    private javax.swing.JSpinner jSp_reso_h_gif;
    private javax.swing.JSpinner jSp_reso_h_jpg;
    private javax.swing.JSpinner jSp_reso_h_png;
    private javax.swing.JSpinner jSp_reso_h_tif;
    private javax.swing.JSpinner jSp_reso_w_bmp;
    private javax.swing.JSpinner jSp_reso_w_gif;
    private javax.swing.JSpinner jSp_reso_w_jpg;
    private javax.swing.JSpinner jSp_reso_w_png;
    private javax.swing.JSpinner jSp_reso_w_tif;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTe_Coun;
    public static javax.swing.JTextField jTe_address;
    private javax.swing.JTextField jTe_bits_bmp;
    private javax.swing.JTextField jTe_bits_gif;
    private javax.swing.JTextField jTe_bits_jpg;
    private javax.swing.JTextField jTe_bits_png;
    private javax.swing.JTextField jTe_bits_tif;
    private javax.swing.JTextField jTe_city;
    private javax.swing.JTextField jTe_copy_png;
    public static javax.swing.JTextField jTe_file_name;
    private javax.swing.JTextField jTe_make_jpg;
    private javax.swing.JTextField jTe_make_tif;
    private javax.swing.JTextField jTe_sig_png;
    public static javax.swing.JTextField jTe_size;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

    public static boolean isAddressWrong(String Path) {
        File file = new File(Path);
        return !file.exists();

    }
}

class Find_images_from_image_finder extends SwingWorker<Void, String> {

    @Override
    protected Void doInBackground() throws Exception {
        //here you make heavy task this is running in another thread not in EDT
        try {
            if (jTe_address.getText().isEmpty()) {
                switch (jCom_format.getSelectedItem().toString()) {
                    case "*.*": {
                        Main.result = image_Finder.get_all_imges_from_all_path();
                    }
                    break;
                    default:
                        Main.result = image_Finder.get_selected_imges_from_all_path(jCom_format.getSelectedItem().toString());
                        break;
                }
            } else if (!Main.isAddressWrong(jTe_address.getText())) {
                switch (jCom_format.getSelectedItem().toString()) {
                    case "*.*": {
                        Main.result = image_Finder.get_all_imges_from_selected_path(jTe_address.getText());
                    }
                    break;
                    default:
                        Main.result = image_Finder.get_selected_imges_from_selected_path(jCom_format.getSelectedItem().toString(), jTe_address.getText());
                        break;
                }
            } else {
                JOptionPane.showMessageDialog(null, "Path is Wrong \nPlease Browse a correct path", "Error", JOptionPane.ERROR_MESSAGE);
                jBu_browse.doClick();
            }
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    @Override
    protected void done() {
        //System.out.println("####################Done################");
    }
}

class Find_images_from_MetaData_Extractor extends SwingWorker<Void, String> {

    @Override
    protected Void doInBackground() throws Exception {
        //here you make heavy task this is running in another thread not in EDT
        try {
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy MMM dd");
            String s;
            try {
                s = simpleDateFormat.format(Main.jDa_crate.getDate());
            } catch (Exception e) {
                s = "";
            }
            int size = Integer.parseInt(Main.jTe_size.getText());
            if ("KB".equals(Main.jCo_data_size.getSelectedItem().toString())) {
                size *= 1024;
            } else if ("MB".equals(Main.jCo_data_size.getSelectedItem().toString())) {
                size *= 1024 * 1024;
            } else if ("GB".equals(Main.jCo_data_size.getSelectedItem().toString())) {
                size *= 1024 * 1024 * 1024;
            }
            int val = Integer.parseInt(Main.jCo_size_plu_min.getSelectedItem().toString());
            int min = size - ((size / 100) * val);
            int max = size + ((size / 100) * val);
            MetaData_Extractor.metaData_from_basic_functions(result, Main.jTe_file_name.getText(), false, s, max, min);
        } catch (SQLException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException e) {
        }
        return null;
    }

    @Override
    protected void done() {
        //System.out.println("####################Done################");
    }
}

class Index_Path extends SwingWorker<Void, String> {

    @Override
    protected Void doInBackground() throws Exception {
        //here you make heavy task this is running in another thread not in EDT
        try {
            image_data_to_database.set(result);
        } catch (ParseException | SQLException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    @Override
    protected void done() {
        //System.out.println("####################Done################");
    }
}
